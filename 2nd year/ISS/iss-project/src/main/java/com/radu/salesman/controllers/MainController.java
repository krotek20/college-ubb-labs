/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 *
 * Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
 */
package com.radu.salesman.controllers;

import com.radu.salesman.domain.CartElement;
import com.radu.salesman.domain.Product;
import com.radu.salesman.domain.Role;
import com.radu.salesman.ui.UIException;
import com.radu.salesman.ui.gui.AppLayout;
import com.radu.salesman.ui.gui.MainGUI;
import com.radu.salesman.utils.Parse;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.AnchorPane;

import javafx.scene.control.*;

import java.util.Collection;

// ----------- << imports@AAAAAAF4xo9aVCM6d10= >>
// ----------- >>

// ----------- << class.annotations@AAAAAAF4xo9aVCM6d10= >>
// ----------- >>
public class MainController extends Controller {
    private final ObservableList<Product> products = FXCollections.observableArrayList();

    @FXML
    private AnchorPane pane;
    @FXML
    private Button manageProductsButton;
    @FXML
    private TextField quantityText;
    @FXML
    private TableView<Product> productsTable;
    @FXML
    private TableColumn<Product, String> nameColumn;
    @FXML
    private TableColumn<Product, Integer> quantityColumn;
    @FXML
    private TableColumn<Product, Float> priceColumn;

    private void invalidateData() {
        products.clear();
    }

    // ----------- << method.annotations@AAAAAAF4xpCpVicUAVY= >>
    // ----------- >>
    private Collection<Product> handleViewProducts() {
        // ----------- << method.body@AAAAAAF4xpCpVicUAVY= >>
        // ----------- >>
        return service.getProducts();
    }

    private void initializeData() {
        Scene scene = pane.sceneProperty().get();
        if (scene != null && scene.getRoot() != pane) {
            return;
        }
        products.setAll(handleViewProducts());
    }

    @FXML
    private void initialize() {
        pane.sceneProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && newValue.getRoot() == pane) {
                initializeData();
                manageProductsButton.setVisible(currentUser.getRole() == Role.ADMIN);
            }
        });

        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        quantityColumn.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        productsTable.setItems(products);
    }

    private int insertQuantity() {
        return Parse.safeParseInteger(quantityText.getText());
    }

    @FXML
    public void handleAddToCart() {
        Product product = productsTable.getSelectionModel().getSelectedItem();
        if (product == null) {
            MainGUI.showAlert(Alert.AlertType.ERROR, "No product selected!", ButtonType.CLOSE);
            return;
        }
        int quantity;
        try {
            quantity = insertQuantity();
        } catch (UIException ex) {
            MainGUI.showAlert(Alert.AlertType.ERROR, ex.getMessage(), ButtonType.CLOSE);
            return;
        }
        CartElement cartElement = service.addElementToCart(product, currentUser.getCart(), quantity);
        if (cartElement == null) {
            MainGUI.showAlert(Alert.AlertType.ERROR, "Error adding new element to cart!", ButtonType.CLOSE);
            return;
        }
        currentUser.getCart().addCartElement(cartElement);
    }

    @FXML
    public void handleOpenProductsMenu() {
        MainGUI.activatePane(AppLayout.MNG_PRD);
    }

    @FXML
    public void handleOpenCart() {
        MainGUI.activatePane(AppLayout.CART);
    }

    @FXML
    public void handleLogOut() {
        MainGUI.activatePane(AppLayout.AUTH);
        invalidateData();
        currentUser = null;
    }
    // ----------- << class.extras@AAAAAAF4xo9aVCM6d10= >>
    // ----------- >>
}
