/*
 * This code has been generated by the Rebel: a code generator for modern Java.
 *
 * Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
 */
package com.radu.salesman.repository.orm;

import com.radu.salesman.domain.User;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import com.radu.salesman.repository.UserRepository;

import java.util.ArrayList;
import java.util.List;

// ----------- << imports@AAAAAAF4xo2UwBY6C0s= >>
// ----------- >>

// ----------- << class.annotations@AAAAAAF4xo2UwBY6C0s= >>
// ----------- >>

public class UserORMRepository implements UserRepository {
    private static SessionFactory sessionFactory;

    public static void setSessionFactory(SessionFactory sessionFactory) {
        UserORMRepository.sessionFactory = sessionFactory;
    }

    @Override
    public User findOne(Long id) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                User user = session.createQuery("from User where id = :id", User.class)
                        .setParameter("id", id).getSingleResult();
                tx.commit();
                return user;
            } catch (RuntimeException ex) {
                if (tx != null) {
                    tx.rollback();
                }
            }
        }
        return null;
    }

    @Override
    public Iterable<User> findAll() {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                List<User> users = session.createQuery("from User ", User.class).list();
                tx.commit();
                return users;
            } catch (RuntimeException ex) {
                if (tx != null) {
                    tx.rollback();
                }
            }
        }
        return new ArrayList<>();
    }

    @Override
    public User save(User user) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                session.save(user);
                tx.commit();
                return user;
            } catch (RuntimeException ex) {
                if (tx != null) {
                    tx.rollback();
                }
            }
        }
        return null;
    }

    @Override
    public void update(User user) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                User updatedUser = session.load(User.class, user.getId());
                updatedUser.setUsername(user.getUsername());
                updatedUser.setPassword(user.getPassword());
                updatedUser.setContact(user.getContact());
                updatedUser.setPayment(user.getPayment());
                updatedUser.setRole(user.getRole());
                updatedUser.setCart(user.getCart());
                tx.commit();
            } catch (RuntimeException ex) {
                if (tx != null) {
                    tx.rollback();
                }
            }
        }
    }

    @Override
    public void delete(Long id) {
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                User user = session.createQuery("from User where id = :id", User.class)
                        .setParameter("id", id).getSingleResult();
                session.delete(user);
                tx.commit();
            } catch (RuntimeException ex) {
                if (tx != null) {
                    tx.rollback();
                }
            }
        }
    }

    // ----------- << method.annotations@AAAAAAF4xo4x8Bl+hgM= >>
    // ----------- >>
    @Override
    public User findUser(String username, String password) {
        // ----------- << method.body@AAAAAAF4xo4x8Bl+hgM= >>
        // ----------- >>
        try (Session session = sessionFactory.openSession()) {
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                User user = session.createQuery(
                        "from User where username = :username and password = :password", User.class)
                        .setParameter("username", username)
                        .setParameter("password", password)
                        .getSingleResult();
                tx.commit();
                return user;
            } catch (RuntimeException ex) {
                if (tx != null) {
                    tx.rollback();
                }
            }
        }
        return null;
    }
    // ----------- << class.extras@AAAAAAF4xo2UwBY6C0s= >>
    // ----------- >>
}
